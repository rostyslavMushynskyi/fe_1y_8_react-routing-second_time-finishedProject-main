import { useState, useEffect, useCallback } from "react";
import PropTypes from "prop-types";
import { useAuth } from "../contexts/AuthContext";
import {
  checkIsFavorite,
  toggleMovieFavorite,
} from "../services/favoritesService";
import styles from "./FavoriteButton.module.css";

function FavoriteButton({ movie, className = "", onToggle }) {
  const { isAuthenticated, user } = useAuth();
  const [isFavorite, setIsFavorite] = useState(false);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const checkFavoriteStatus = useCallback(async () => {
    try {
      const favoriteStatus = await checkIsFavorite(movie.id);
      setIsFavorite(favoriteStatus);
    } catch (err) {
      console.error("Failed to check favorite status:", err);
    }
  }, [movie]);

  // –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å—Ç–∞—Ç—É—Å —É–ª—é–±–ª–µ–Ω–æ–≥–æ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ
  useEffect(() => {
    if (isAuthenticated && movie) {
      checkFavoriteStatus();
    }
  }, [isAuthenticated, movie, checkFavoriteStatus]);

  const handleToggleFavorite = async () => {
    if (!isAuthenticated) {
      setError("–£–≤—ñ–π–¥—ñ—Ç—å –≤ –∞–∫–∞—É–Ω—Ç, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ —Ñ—ñ–ª—å–º–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö");
      return;
    }

    if (!movie) {
      setError("–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ —Ñ—ñ–ª—å–º –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞");
      return;
    }

    console.log("Toggle favorite - start:", {
      movieId: movie.id,
      movieTitle: movie.title,
      currentIsFavorite: isFavorite,
      isAuthenticated,
      currentPage: window.location.pathname,
      userObject: user,
      sessionId: localStorage.getItem("tmdb_session_id"),
    });

    setIsLoading(true);
    setError(null);

    try {
      const result = await toggleMovieFavorite(movie, isFavorite);
      console.log("Toggle favorite - result:", result);

      if (result.success) {
        const newFavoriteState = !isFavorite;
        setIsFavorite(newFavoriteState);

        // –í–∏–∫–ª–∏–∫–∞—î–º–æ callback —è–∫—â–æ –≤—ñ–Ω –ø–µ—Ä–µ–¥–∞–Ω–∏–π
        if (onToggle) {
          onToggle(newFavoriteState);
        }

        // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—Ö
        if (!isFavorite) {
          console.log(`‚úÖ –§—ñ–ª—å–º "${movie.title}" –¥–æ–¥–∞–Ω–æ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö`);
        } else {
          console.log(`‚úÖ –§—ñ–ª—å–º "${movie.title}" –≤–∏–¥–∞–ª–µ–Ω–æ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö`);
        }
      } else {
        console.error("Toggle favorite - failed:", result);
        throw new Error(
          result.statusMessage || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å—Ç–∞—Ç—É—Å —É–ª—é–±–ª–µ–Ω–æ–≥–æ"
        );
      }
    } catch (err) {
      console.error("Failed to toggle favorite:", err);
      setError(err.message || "–ù–µ –≤–¥–∞–ª–æ—Å—è –æ–Ω–æ–≤–∏—Ç–∏ —Å–ø–∏—Å–æ–∫ —É–ª—é–±–ª–µ–Ω–∏—Ö");
    } finally {
      setIsLoading(false);
    }
  };

  // –û—á–∏—â–µ–Ω–Ω—è –ø–æ–º–∏–ª–∫–∏ —á–µ—Ä–µ–∑ –∫—ñ–ª—å–∫–∞ —Å–µ–∫—É–Ω–¥
  useEffect(() => {
    if (error) {
      const timer = setTimeout(() => {
        setError(null);
      }, 3000);

      return () => clearTimeout(timer);
    }
  }, [error]);

  if (!movie) {
    return null;
  }

  return (
    <div className={`${styles.favoriteButtonContainer} ${className}`}>
      <button
        className={`${styles.favoriteButton} ${
          isFavorite ? styles.active : ""
        } ${isLoading ? styles.loading : ""} ${
          className ? styles[className] || className : ""
        }`}
        onClick={handleToggleFavorite}
        disabled={isLoading}
        title={
          !isAuthenticated
            ? "–£–≤—ñ–π–¥—ñ—Ç—å –≤ –∞–∫–∞—É–Ω—Ç, —â–æ–± –¥–æ–¥–∞–≤–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö"
            : isFavorite
            ? "–í–∏–¥–∞–ª–∏—Ç–∏ –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö"
            : "–î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö"
        }
        aria-label={
          isFavorite
            ? `–í–∏–¥–∞–ª–∏—Ç–∏ "${movie.title}" –∑ —É–ª—é–±–ª–µ–Ω–∏—Ö`
            : `–î–æ–¥–∞—Ç–∏ "${movie.title}" –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö`
        }
      >
        <span className={styles.icon}>
          {isLoading ? "üîÑ" : isFavorite ? "‚ù§Ô∏è" : "ü§ç"}
        </span>

        <span className={styles.text}>
          {isLoading
            ? "–ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è..."
            : isFavorite
            ? "–í —É–ª—é–±–ª–µ–Ω–∏—Ö"
            : "–î–æ–¥–∞—Ç–∏ –¥–æ —É–ª—é–±–ª–µ–Ω–∏—Ö"}
        </span>
      </button>

      {error && <div className={styles.errorMessage}>{error}</div>}
    </div>
  );
}

FavoriteButton.propTypes = {
  movie: PropTypes.shape({
    id: PropTypes.number.isRequired,
    title: PropTypes.string.isRequired,
    poster_path: PropTypes.string,
    overview: PropTypes.string,
    release_date: PropTypes.string,
    vote_average: PropTypes.number,
  }).isRequired,
  className: PropTypes.string,
  onToggle: PropTypes.func,
};

export default FavoriteButton;
